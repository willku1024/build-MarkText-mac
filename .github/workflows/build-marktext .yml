# GitHub Actions workflow – **manual** macOS **ARM64** build for MarkText

# This version produces native Apple‑Silicon (arm64) DMG/ZIP artefacts.

name: build-mac-arm

on:
  workflow_dispatch:

env:
  GCI: git-commit-info.txt

jobs:
  build-macos:
    # Apple‑Silicon runner (macOS 14) → builds arm64 binaries directly
    runs-on: macos-14
    timeout-minutes: 60
    env:
      MARKTEXT_EXIT_ON_ERROR: 1
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          repository: "marktext/marktext"

      - name: Record latest commit info
        run: |
          git log --pretty=format:"%cd|||%cn|||%s" -1 --date=unix > ${{ env.GCI }}

      - name: Upload commit info
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.GCI }}
          path: ${{ env.GCI }}

      - name: Install Node.js (v20 LTS)
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: yarn.lock

      # Provide Python 3.11 (bundles distutils) for node‑gyp
      - name: Setup Python 3.11 for node-gyp
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Export Python path for node-gyp
        run: |
          echo "PYTHON=$(which python)" >> $GITHUB_ENV
          echo "npm_config_python=$(which python)" >> $GITHUB_ENV

      # Ensure OpenSSL headers are available if native rebuild is needed
      - name: Install OpenSSL dev headers
        run: |
          brew install openssl@1.1
          echo "LDFLAGS=-L$(brew --prefix openssl@1.1)/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$(brew --prefix openssl@1.1)/include" >> $GITHUB_ENV

      - name: Install dependencies
        run: yarn install --check-files --frozen-lockfile

      - name: Build macOS arm64 release (dmg + zip)
        # Pass --arm64 so electron‑builder skips universal/x64 targets
        run: yarn run release:mac -- --arm64

      - name: Archive release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dmg-arm64
          path: |
            build/**/*arm64*.dmg
            build/**/*arm64*.zip

  parse-artifacts:
    runs-on: ubuntu-latest
    needs: build-macos
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4

      - name: Prepare changelog and env vars
        run: |
          ls -lshR
          log=$(cat */${{ env.GCI }})
          timestamp=$(echo $log | grep -o '^[0-9]\\+')
          # Convert to China Standard Time (UTC+8)
          china=$(($timestamp + 28800))
          dateTime=$(date --date="@$china" +"%Y-%m-%d %H:%M:%S")
          dateTimeFileName=$(date --date="@$china" +"%Y-%m-%d_%H.%M.%S")
          echo "GIT_COMMIT_DATE_TIME_FILE_NAME=$dateTimeFileName" >> $GITHUB_ENV
          now=$(date +%s)
          now=$(($now + 28800))
          echo "TIME_STAMP=$(date --date=\"@$now\" +%Y-%m-%d_%H.%M.%S)" >> $GITHUB_ENV
          echo "GIT_COMMIT_INFO=$log" >> $GITHUB_ENV
          echo -e "$dateTime \n $log" > CHANGELOG.txt

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.GIT_COMMIT_DATE_TIME_FILE_NAME }}_${{ env.TIME_STAMP }}
          body_path: CHANGELOG.txt
          files: |
            **/*arm64*.dmg
            **/*arm64*.zip
